------
description: 代码规则规范（包含Python文件开发的约束条件，如功能修改原则、注释要求、文件目录规范、函数参数限制等）
globs:
    - "**/*"  # 匹配项目中所有文件（包括所有子目录下的各类文件）
alwaysApply: true
--------

1.对于已实现且功能正确的代码，非特殊需求不得随意修改。例如：若当前指令为完善功能 A，仅需专注于 A 的优化，禁止变更其他无关功能（如 B）。

2.所有代码注释需使用中文，文件编码统一为 UTF-8。

3.生成中文内容时需检查是否存在乱码，若有应及时修正；生成含中文的图片时，需确保中文正常显示，避免乱码。

4.修改函数实现时，需先理解原有逻辑，在保留其核心功能的基础上进行完善，禁止直接移除原有实现。

5.若未明确要求修改数据格式，所有数据操作均需保持原有格式。

6.项目根目录必须包含 README.md，内容应包括程序整体功能、使用说明及目录结构；收到 “更新程序说明” 指令时，需及时更新该文件。

7.指定文件夹（['utils','pipeline','config']）需在各自目录下生成说明文件（如 utils/utils.md），内容应说明文件夹内各文件的功能；收到 “更新 xx 说明” 指令时，需同步更新对应 md 文件。

8.检索文件内容时，优先查阅对应 md 说明文件，以其记载内容为准。

9.所有临时文件必须存放于 data/temp 目录，禁止直接存放于根目录。

10.禁止新建与项目无关的脚本文件；测试脚本需存放于临时文件夹（data/temp），测试通过后需整合至正式程序目录；若不确定整合位置，应主动询问或检索相关文件说明。

11.所有正式测试文件需存放于 tests 目录，禁止存放于根目录。

12.根目录需保持整洁，非必要不新增文件；确需新增时，必须同步说明新增原因及用途。

13.创建文件并写入内容时，需确保内容正确写入，避免出现空文件（仅创建文件但未写入有效内容）。

14.函数参数若超过 3 个，需使用对象作为参数传入。
15.调试用的打印语句需使用固定格式：print (f'-test-- {内容}')；测试完成后，必须删除所有与程序功能无关的调试内容。

16.预测程序可能存在问题时，禁止使用【默认数据】【最小数据】【常用数据】等替代配置；若发现数据或配置缺失，应直接告知，由我决定解决方案（避免因隐藏配置导致项目出错且难以排查）。

17.发现错误时，应直接解决当前问题，禁止采用迂回方式（如为解决数据读取错误擅自新增【自动检测】函数）；数据或配置需严格一一对应，读取失败时应排查根本原因，而非规避问题。

18.单个文件的代码不要超出500行

19.在添加新代码时可以检测一下md文件，看是否有可复用的内容

20.打印内容需要隔开，不然我看到的都是连成一片的内容